@page "/song/{songId}"

@inject Web1001.Services.ISongsService songService
@inject Web1001.Services.IReviewService reviewService
@inject Web1001.Services.IUserService userService
@inject Web1001.Shared.GlobalState globalState
@using Web1001.Models

<PageTitle>1001 Songs | Song</PageTitle>

<style>
    .overflow-auto {
        overflow: auto;
        width: 100%;
    }
    .reviews-table {
        min-width: 100%;
        width: 100%;
    }
    .reviews-table > th {
        font-weight: bold;
    }

    .mdc-data-table__table {
        white-space: inherit;
    }  
</style>

@if(@currentSong != null)
{
    <h3>Reviews for "@currentSong.SongName" by @currentSong.ArtistName (@currentSong.Year)</h3>
    <p>
        Spotify: 
        <a rel="noopener noreferrer" href="@GetSpotifyAppLink()">App</a> | 
        <a target="_blank" rel="noopener noreferrer" href="@currentSong.SpotifyUri">Web</a>    
    </p>
    <img class="responsive" src="@currentSong.ImageUri">
    <p>
        Your Review: @MyReview
    </p>

    @if(@AllReviews != null)
    {
        <div>
            Users have submitted <b>@totalReviews</b> reviews with an average score of <b>@averageRating</b>.
        </div>

        <div class="overflow-auto">
            <p>
                <MBDataTable class="reviews-table" 
                    Items="@AllReviews"
                    GetKeysFunc="@((review) => review.ReviewId)" 
                    ShowProgress="@ShowProgress" 
                    Context="row">
                    <TableHeader>
                        <th class="mdc-data-table__header-cell mdc-data-table__header-cell--numeric header-bold" role="columnheader" scope="col">Stars</th>
                        <th class="mdc-data-table__header-cell header-bold" role="columnheader" scope="col">Comment</th>
                    </TableHeader>
                    <TableRow>
                        <td class="mdc-data-table__cell mdc-data-table__cell--numeric">@row.StarRating</td>
                        <td class="mdc-data-table__cell"><div style="">@row.Comment</div></td>
                    </TableRow>
                </MBDataTable>
            </p>
        </div>
    }
} else {
    <p>Song details go here.</p>
}

@code {
    [Parameter]
    public string? SongId { get; set; }
    private string stars = "⭐⭐⭐⭐⭐";
    private SongModel? currentSong { get; set; }
    private bool ShowProgress { get; set; }
    private string MyReview { get; set; } = "";
    private List<ReviewModel>? AllReviews { get; set; } = new List<ReviewModel>();

    private int totalReviews;
    private double averageRating;        

    protected override async Task OnInitializedAsync() {
        if (SongId != null) {
            ShowProgress = true;
            currentSong = await songService.GetSongById(SongId);
            List<ReviewModel> unsorted = await reviewService.GetReviews(Guid.Parse(SongId));
            AllReviews = unsorted.OrderByDescending(r => r.PostedDateTime).ToList();
            ShowProgress = false;

            try {
                if (globalState.UserId != null)
                {
                    ReviewModel myReview = unsorted.First(r => r.ReviewerId == Guid.Parse(globalState.UserId));
                    MyReview = stars.Substring(0, myReview.StarRating) + " " + myReview.Comment;
                }
            } catch (Exception) {
                // do nothing?
            }

            totalReviews = unsorted.Count;
            averageRating = Math.Round(unsorted.Average(r => r.StarRating), 2);            
        }
    }

    private string GetSpotifyAppLink()
    {
        if (currentSong != null && !string.IsNullOrEmpty(currentSong.SpotifyUri))
        {
            try {
                string [] parts = currentSong.SpotifyUri.Split("/");
                string [] result = { "spotify", "track", parts.Last() };
                return String.Join(":", result);
            } catch (Exception) {
                return "";
            }
        }
        return "";        
    }

}